ComponentParameter SmartCdlServerParams component SmartCdlServer {

	InternalParameter PathNav {
		pathNavPredictedGoalPose_controll1_dist : Double = 200.0
		pathNavPredictedGoalPose_controll1_speed : Double = 100.0
		pathNavPredictedGoalPose_controll2_dist : Double = 300.0
		pathNavPredictedGoalPose_controll2_speed : Double = 250.0
		pathNavPredictedGoalPose_controll3_dist : Double = 600.0
		pathNavPredictedGoalPose_controll3_speed : Double = 600.0
		pathNavPredictedGoalPose_minDist : Double = 200
		
		pathNavRecover_max_dist : Double = 2000
		
		/** timout for robot beeing block in secons */
		robotBlocked_event_timeout : UInt16 = 15
	}
	
 	InternalParameter Cdl {
 		dataDir: String= "data/lookup-files/"
 		
 		/** File with the curvature indices as produced by cdlCalculate. Relative to current dir or absolute. See also parameter LOOKUPTABLE().*/
 		curvature_default_file: String= "CDLindex_P3DX.dat"
 		
 		/** File with the distance values as produced by cdlCalculate. Relative to current dir or absolute. See also parameter LOOKUPTABLE().*/
 		lookup_default_file: String= "CDLdist_P3DX.dat"
 		lookup_default_file_compressed :Boolean = false
 		
 		/** File with the allowed accelerations as produced by cdlCalculate. Relative to current dir or absolute. See also parameter LOOKUPTABLE().*/
 		accel_default_file: String= "CDLacc_P3DX.dat"
 		
 		/** File with the curvature indices as produced by cdlCalculate. Relative to current dir or absolute. See also parameter LOOKUPTABLE().*/
 		curvature_second_file: String= "CDLindex_P3DX.dat"
 		
 		/** File with the distance values as produced by cdlCalculate. Relative to current dir or absolute. See also parameter LOOKUPTABLE().*/
 		lookup_second_file:String="CDLdist_P3DX.dat"
 		lookup_second_file_compressed :Boolean = false
 		
 		/** File with the allowed accelerations as produced by cdlCalculate. Relative to current dir or absolute. See also parameter LOOKUPTABLE().*/
 		accel_second_file: String= "CDLacc_P3DX.dat"
 		
 		/** Translational acceleration. [mm/s^2]*/
 		translation_acc: Double= 400.0
 		
 		/**  Rotational acceleration. [deg/s^2]*/
 		rotation_acc: Double= 100.0
 		
 		/**  CDL predicts the robot motion deltacalc timesteps into the future. (10Hz was 0.7 now with 20Hz 0.35 Matthias)*/
 		delta_t_calc: Double= 0.35
 		
 		/**  The time steps for the CDL execution cycle. Defines the rate in which the CDL task is executed.*/
 		delta_t_trigger: Double=0.1
 		
		// 	vmax: Double= 400.0
		// 	vmin: Double= 0.0
		// 	wmax: Double= 40.0
		// 	wmin: Double= -40.0
		// 	goalX: Double= 0.0
		// 	goalY: Double= 0.0
		// 	goalA: Double= 0.0
		// 	safetyClearance: Double= 200.0

		/** In following mode: if true, the robot will only follow the person if the person moved a considerably distance. */
 		followHysteresis: Boolean= false
 		contour_default_file: String= "CDLcontour_P3DX.dat"
 		contour_second_file: String= "CDLcontour_P3DX.dat"
 		use_obstacle_history: Boolean= false
	 	freeBehaviorDist:Double = 350.0
	 	freeBehaviorDist_second: Double = 350.0
 	}
 	

 	InternalParameter CdlRotate {
 		/** Define allowed error for in place rotation [deg]. Similar to goalregion for rotation.*/
 		error: Double= 5.0
 		rotDev1: Double=1.0
 		rotDev2: Double=1.0
 		rotDev3: Double=15.0
 		rotDev4: Double=45.0
 		rotSpeed1: Double=0.0
 		rotSpeed2: Double=2.0
 		rotSpeed3: Double=10.0
 		rotSpeed4: Double=70.0
 	}
 	
 	InternalParameter Server {
 		plannerInit: Boolean= true
 		trackerInit: Boolean= false
 		laserClient2Init: Boolean= false
 		irClientInit:Boolean=false
 		pathNavInit:Boolean=false
 		baseClientInit:Boolean=false
 	}

 	ParameterSetInstance CommNavigationObjects.CdlParameter {
 		/** Set the CDL strategy. Available strategies:

		- REACTIVE: Reactive driving. The robot tries to maximize its speed by avoiding any obstacles. It will drive into the direction which allows the highest translational velocity and provides the largest remaining travel distance. This is the default value.
		- JOYSTICK: The robot can be controlled with a joystick. The CDL takes input from the port navigationVelocitySendServer and choses a trajectory closest to the v, w commands given by the joystick. See also server port navigationVelocitySendServer.
		- APPROACH_HALT: Approach a goal and halt when reached. Will send a CDL_GOAL_REACHED event via the cdlGoalEventServer when the goal is reached. Possible goal modes: ABSOLUTE, PLANNER.
		- APPROACH: Approach a target but switch to REACTIVE when the goal is reached rather than stopping as in strategy APPROACH_HALT. Will send a CDL_GOAL_REACHED event via the cdlGoalEventServer when the goal is reached. Can be used to achieve smooth movement when using intermediate goal points. Goal modes: ABSOLUTE, PLANNER.
		- ROTATE: Rotate into the given direction and report this by the CDL_GOAL_REACHED event. The heading can be given by absolute position, absolute angle or relative angle. Goal modes: ABSOLUTE, ANGLEABSOLUTE, ANGLERELATIVE.
		- FOLLOW: Drive into the given direction with the given translational velocity. Takes goals from the trackingClient port. Used e.g. by the smartLaserPersonTracker. Goal modes: PERSON.
		- BACKWARD: Move blindly backwards and stop as soon as the given distance has been covered. The distance is calculated to a previously saved position (parameter SAVECURPOS()). Note that this is blind driving. This strategy can be used if a mobile platform has no laser scanner mounted that points backwards. Fires CDL_GOAL_REACHED when distance has been covered.
		- PATH_NAV: TODO
		
		*/
 		TriggerInstance SETSTRATEGY passive
 		
 		/** Activate or deactivate the free behavior in stalled situations. If activated, the robot will turn in a free direction in stalled situations. Values: ACTIVATE, DEACTIVATE */
		ParameterInstance FREEBEHAVIOR {free = DEACTIVATE}
		
		ParameterInstance PATHNAVFREEBEHAVIOR{free = DEACTIVATE}
		
		/** Changes the lookup table. Lookup tables are precalculated in files and contain the kinematics and shape of the robot. Two lookup files can be specified in the ini configuration. This parameter allows to switch between these lookup tables at runtime. Note that you can use this parameter only in state neutral. Values: DEFAULT, SECOND. See Ini-Configuration.*/
		ParameterInstance LOOKUPTABLE { lt = DEFAULT }
		
		/** Set translation velocity ?vmin, ?vmax in [mm/s]. The values are thresholded by the robot's vmin and vmax inputs to calculate the lookup tables in cdlCalculate (CDL_V_TRA_).*/
		ParameterInstance TRANSVEL {
			vmin = 0.0
			vmax = 400.0
		}
		
		/** Set rotation velocity minimum/maximum values ?wmin, ?wmax in [deg/s]. The values are thresholded by the robot's wmin and wmax inputs to calculate the lookup tables in cdlCalculate (CDL_V_ROT_).*/
		ParameterInstance ROTVEL {
			wmin = -40.0
			wmax = 40.0
		}
		
		/** Set goal type and goal source. Available modes:

		- ABSOLUTE: Use absolute goal position. Can only be used for goals that do not require path planning, as the CDL cannot handle local minimas. See strategies. Goal can be set with parameter GOALREGION(?x)(?y)(?a)(?id), while ?a is ignored. Used to approach a goal exactly.
		- PLANNER: Goal specification from planner, port plannerClient. Typically used with path planners (e.g. smartPlannerBreathFirstSearch).
		- PERSON: Optimized parameters for person approaching, port trackingClient (e.g. smartLaserPersonTracker).
		- SAVED: Used for backward driving (strategy BACKWARD) as a point of reference to calculate the driven distance. The reference point must be saved with SAVECURPOS() first.
		- ANGLEABSOLUTE: Heading is given by an absolute angle [deg]. Used with strategy ROTATE as a reference. Goal direction first must be set with parameter GOALREGION(?x)(?y)(?a)(?id) while ?x and ?y are ignored.
		- ANGLERELATIVE: Heading is given by an angle [deg] relative to robot. Used with strategy ROTATE as a reference. Goal direction must be set with parameter GOALREGION(?x)(?y)(?a)(?id) while ?x and ?y are ignored. Rotates then relative to this saved position. 
		- PATH_NAV: TODO

		*/
		ParameterInstance GOALMODE { gm = NEUTRAL	}
		
		/** Set goal: ?x, ?y, angle ?a, id ?id. Sends an event CDL_GOAL_NOT_REACHED once a new goal is set. CDL_GOAL_REACHED is sent as soon as the goal is reached. All values must be set while ?x/?y or ?a may be ignored depending on the strategy and goalmode.*/
		ParameterInstance GOALREGION {
			goalX = 0.0
			goalY = 0.0
			goalA = 0.0
		}
		
		TriggerInstance SETGOALREGION passive
		
		/** Set goal approach distance [mm]. The robot will approach until goal is within this distance.*/
		ParameterInstance APPROACHDIST { approachDistance = 100.0 }
		
		/** Set CDL_ID. Used to synchronize components, for example with smartMapperGridMap and smartPlannerBreathFirstSearch.*/
		ParameterInstance ID { id = 0 }
		
		/** Save the current robot pose as ?id (for relative movements).*/
		TriggerInstance SAVECURPOS passive
		
		/** Set global CDL safety clearance distance [mm]. Robot will keep this distance from obstacles when approaching.*/
		ParameterInstance SAFETYCL { safetyClearance = 200 }
		
 	}
}
