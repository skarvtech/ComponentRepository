ComponentDocumentation SmartCdlServer {
	Description : "The SmartCdlServer is based on the Curvature Distance Lookup (CDL) algorithm for fast local obstacle avoidance.

				The CDL algorithm is an improvement of the dynamic window approach. It considers the dynamics and kinematics of the robot, as well as its polygonal shape. It consumes raw laser scans or other sensor perceptions transformed into occupancy grids. The basic idea is that a robot moves along different curvatures (v, w combinations) which represent trajectories built up by circular arcs. The huge number of possible v, w combinations is reduced based on the observation that only a few curvatures are safely selectable given the current state and kinematics of the robot. Curvatures leading to a collision are discarded. High performance advantages are achieved by precalculating lookup tables. The final selection along the remaining admissible v, w combinations is done by an objective function, which trades off speed, goal-directedness and remaining distance until collision.

				This objective function together with its weighting factors build different strategies, such as reactive driving, joystick navigation, rotating or approaching goals. The strategies are used for the selection of the best-fitting curvature with respect to the purpose of the strategy. Example strategies are passing over intermediate waypoints, approaching a goal given by a path-planner or following a person.

				The SmartCdlServer will read files which contain precalculated lookup tables generated by cdlCalculate (included in SmartSoft). They contain the kinematics of the robot.

				SmartCdlServer supports differential drive, synchro drive and omnidrive if neglecting lateral velocity.

				Note: This component is used in Tutorials (e.g. Lesson 1).

				See also:
				Christian Schlegel. Fast local obstacle avoidance under kinematic and dynamic constraints for a mobile robot. In Proc. Int. Conf. on Intelligent Robots and Systems (IROS), p. 594-599, Victoria, Canada, 1998. "
	License : "	LGPL"
	HardwareRequirements : "-"
	Purpose : "Navigation"
	
	NeutralMode : "The robot will not move in state neutral. No navigation velocities will be commanded by the component. When changed to neutral, the CDL will stop the base to avoid an emergency stop. This is necessary since some mobile platforms perform an emergency stop if no new velocity command was sent within a timeout specified in firmware (e.g. Pioneer P3DX)."
//	ComponentMode MoveRobot : "The robot will only move when in state moverobot."
//	
//	ComponentPort NavVelSendServer {
//		Description : "Typically connected to the robot base (e.g. SmartPioneerBaseServer). This port sends navigation commands v, w."
//		NeutralMode : "Inactive in this state. On a state change to neutral, v=0 and w=0 will be sent to avoid an emergency stop if used with a Pioneer base."
//		ComponentMode MoveRobot : "Sends navigation commands."
//	}
//	ComponentPort LaserClient {
//		Description : "The laser scans that the CDL algorithm uses for obstacle avoidance, e.g. from SmartLaserLMS200Server."
//		NeutralMode : "Port is neutral, does not consume new input while in this state."
//		ComponentMode MoveRobot : "Considers laser scans for collision avoidance."
//	}
//	ComponentPort LaserClient2 {
//		Description : "Goals from planner (e.g. smartPlannerBreathFirstSearch) can be sent to this port."
//		NeutralMode : "Port is neutral, does not consume new input while in this state."
//		ComponentMode MoveRobot : "Uses goals sent to this port if goalmode is PLANNER."
//	}
//	ComponentPort TrackingClient {
//		Description : "Goals from tracking can be sent to this port. (e.g. smartLaserPersonTracker)"
//		NeutralMode : "Port is neutral, does not consume new input while in this state."
//		ComponentMode MoveRobot : "Uses goals to this port if goalmode is FOLLOW."
//	}
//	CoordinationSlavePort CoordinationPort {
//		DynamicWiringPort : "Slave part of wiring pattern. It is responsible for changing the port connections within the component."
//		StatePort : "See States for descriptions of possible states and their meaning."
//	}
//	ComponentPort NavVelSendClient {
//		Description : "Navigation commands v and w sent via this port will be considered when chosing a trajectory. Can be used to send navigation commands from a joystick (e.g. SmartExampleJoystickNavigationClient) while the CDL ensures a collision free navigation. Accepts input if strategy JOYSTICK is set, ignores otherwise. See strategy JOYSTICK."
//		NeutralMode : "Port is neutral, does not consume new input while in this state."
//		ComponentMode MoveRobot : "CDL uses v, w from this port to chose best trajectory."
//	}
//	ComponentPort GoalEventServer {
//		Description : " Register with event state CDL_GOAL_NOT_REACHED to be notified when the stateful event switches to event state CDL_GOAL_REACHED. The CDL_GOAL_REACHED will be sent only once per activation.
//						CDL_GOAL_REACHED: Is sent when a goal was reached (the robot is within goal distance or angle error). - Depending on the strategy."
//		NeutralMode : "Port is neutral, does not consume new input while in this state."
//		ComponentMode MoveRobot : "Will send goal reached events."
//	}
}