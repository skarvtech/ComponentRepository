//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
//
//  Copyright (C) 2015 Matthias Lutz
//
//        lutz@hs-ulm.de
//
//        ZAFH Servicerobotic Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm
//        Germany
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#include "TriggerHandler.hh"

#include "ComponentFileMover.hh"

// trigger user methods
void TriggerHandler::handleCommBasicObjects_FileOperationsParam_COPYFILE(const std::string &sourceFile, const std::string &destinationFile)
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.

	std::cout<<"[TriggerHandler]: COPYFILE called"<<std::endl;

	CommBasicObjects::CommFileMoverEventState result;
	CommBasicObjects::CommFileReadRequest fileReadRequest;
	fileReadRequest.setFilename(sourceFile);
	fileReadRequest.setCompressFile(true);

	Smart::StatusCode status;
	CommBasicObjects::CommFileReadAnswer fileReadAnswer;
	status = COMP->commFileReadQueryReq->query(fileReadRequest,fileReadAnswer);
	std::cout<<"fileReadQueryClient->query: "<<Smart::StatusCodeConversion(status)<<std::endl;
	if(status == Smart::SMART_DISCONNECTED){
		std::cout << "connecting to: " << COMP->connections.commFileReadQueryReq.serverName << "; " << COMP->connections.commFileReadQueryReq.serviceName << std::endl;
		status = COMP->commFileReadQueryReq->connect(COMP->connections.commFileReadQueryReq.serverName, COMP->connections.commFileReadQueryReq.serviceName);
		std::cout << "connected.\n";

		if(status == Smart::SMART_OK){
			status = COMP->commFileReadQueryReq->query(fileReadRequest,fileReadAnswer);
		}

	}
	if(status == Smart::SMART_OK && fileReadAnswer.getSuccess() == true){
		std::cout<<"Got file read query success!"<<std::endl;
		CommBasicObjects::CommDataFiles files;
		files = fileReadAnswer.getFile();
		//std::cout<<"File: "<<file<<std::endl;

		CommBasicObjects::CommFileWriteRequest fileWriteRequest;
		CommBasicObjects::CommFileWriteAnswer fileWriteAnswer;
		fileWriteRequest.setFilename(destinationFile);
		fileWriteRequest.setFile(files);

		status = COMP->commFileWriteQueryReq->query(fileWriteRequest,fileWriteAnswer);
		std::cout<<"fileWriteQueryClient->query: "<<Smart::StatusCodeConversion(status)<<std::endl;
		if(status == Smart::SMART_DISCONNECTED){
			std::cout << "connecting to: " << COMP->connections.commFileWriteQueryReq.serverName << "; " << COMP->connections.commFileWriteQueryReq.serviceName << std::endl;
			status = COMP->commFileWriteQueryReq->connect(COMP->connections.commFileWriteQueryReq.serverName, COMP->connections.commFileWriteQueryReq.serviceName);
			if(status == Smart::SMART_OK){
				std::cout << "connected.\n";
				status = COMP->commFileWriteQueryReq->query(fileWriteRequest,fileWriteAnswer);
			}
		}
		if(status == Smart::SMART_OK && fileWriteAnswer.getSuccess() == true)
		{
			result.setNewState(CommBasicObjects::FileMoverEventType::TYPE_FILE_SUCCESS);
			std::cout<<"Got file write query success!"<<std::endl;
		} else {
			std::cout<<"ERROR Smart status: "<<Smart::StatusCodeConversion(status)<<std::endl;
			std::cout<<"Got file write query fail!"<<std::endl;
			result.setNewState(CommBasicObjects::FileMoverEventType::TYPE_FILE_ERROR);
		}
	} else {
		std::cout<<"Got file read query fail!"<<std::endl;
		std::cout<<"Query Status: "<<Smart::StatusCodeConversion(status)<<std::endl;
		result.setNewState(CommBasicObjects::FileMoverEventType::TYPE_FILE_ERROR);
	}

	COMP->commFileMoveEventOut->put(result);
}
